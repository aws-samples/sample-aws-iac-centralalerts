# /* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#  SPDX-License-Identifier: MIT-0 */
AWSTemplateFormatVersion: '2010-09-09'
Description: CloudWatch Alarm event rules to send to Central Event Bus Integration

Parameters:

  pCentralEventBusName:
    Type: String
    Description: Name of the central event bus  - Same as in previous stack for iam role
    Default: central_cwalarms_bus

  pCentralAccountId:
    Type: String
    Description: AWS Account ID where central event bus is located
    Default: '123456789012'

  pCentralEventBusRegion:
    Type: String
    Description: Region where central event bus is located
    Default: eu-west-2

  pLambdaFunctionName:
    Type: String
    Description: Name of the Lambda function to enrich the event - Same as in previous stack for role
    Default: cloudwatch_alarms_resourcetags_enricher

  pLambdaTimeout:
    Type: Number
    Description: Timeout for the Lambda function
    Default: 10

  pLambdaMemorySize:
    Type: Number
    Description: Memory size for the Lambda function
    Default: 128

  pLambdaReservedConcurrentExecutions:
    Type: Number
    Description: Reserved concurrent executions for the Lambda function
    Default: 20

  pLambdaFunctionRoleName:
    Type: String
    Description: Name of the IAM Role for the Lambda function  - Same as in previous stack for role
    Default: EventTagsEnricherLambdaExecutionRole

  pAlarmStateChangeRuleName:
    Type: String
    Description: Create CloudWatch Alarm event rule for state changes
    Default: cwalarm_statechange_enrich_rule

  pLogGroupName:
    Type: String
    Description: 'Name of the CloudWatch Log Group - /aws/events/ is prefixed to the name'
    Default: central_cloudwatch_alarms_events

  pLogGroupRetentionDays:
    Type: Number
    Description: Number of days to retain log events
    Default: 7

  pCloudWatchKMSKeyAlias:
    Type: String
    Description: KMS Key alias for CloudWatch encryption
    Default: alias/centralalerts_cloudwatch_logs

  pEnrichedEventSource:
    Type: String
    Description: Field to populate with the source of the event
    Default: alarm-cloudwatch-enriched

  pEventRulePattern:
    Type: String
    Description: EventBridge Rule Pattern
    Default: |
      {
      "detail-type": ["EC2 Instance State-change Notification", "CloudWatch Alarm State Change"],
      "source": ["aws.ec2", "aws.cloudwatch"],
      "detail": {
        "$or": [{
          "state": ["terminated", "stopped"]
        },
        {
          "state": {
            "value": ["ALARM", "OK"]
          }
        }]
      }
      }

Resources:

   # KMS Key for CloudWatch Logs
  rCloudWatchKMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS key for CloudWatch Logs encryption
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: kms:*
            Resource: '*'
          - Sid: Allow CloudWatch Logs
            Effect: Allow
            Principal:
              Service: logs.amazonaws.com
            Action:
              - kms:Encrypt*
              - kms:Decrypt*
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:Describe*
            Resource: '*'

  # KMS Key Alias
  rKMSKeyCWAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Ref pCloudWatchKMSKeyAlias
      TargetKeyId: !Ref rCloudWatchKMSKey

  rAlarmEventsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/events/${pLogGroupName}"
      KmsKeyId: !GetAtt rCloudWatchKMSKey.Arn
      RetentionInDays: !Ref pLogGroupRetentionDays

  rLogGroupLambda:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${pLambdaFunctionName}"
      KmsKeyId: !GetAtt rCloudWatchKMSKey.Arn
      RetentionInDays: !Ref pLogGroupRetentionDays

  rEventTagsEnricherLambda:
    # checkov:skip=CKV_AWS_117: "Ensure that AWS Lambda function is configured inside a VPC, This lambda dosent need to configured in a VPC"
    # checkov:skip=CKV_AWS_116: "These lambda functions are triggered manually and not by events so DLQ is not required"
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import json
          import os

          service_cloudwatch_dimension_map = {
            "ec2": {
              "InstanceId": "instance",
              "VolumeId": "volume",
              "AutoScalingGroupName": "autoScalingGroup",
              "ImageId": "image"
            },
            "rds": {
              "DBInstanceIdentifier": "db",
              "DBClusterIdentifier": "cluster",
              "DatabaseClass": "database"
            },
            "lambda": {
              "FunctionName": "function",
              "ExecutedVersion": "version"
            },
            "dynamodb": {
              "TableName": "table",
              "GlobalSecondaryIndexName": "index"
            },
            "elasticache": {
              "CacheClusterId": "cluster",
              "CacheNodeId": "node"
            },
            "ecs": {
              "ClusterName": "cluster",
              "ServiceName": "service",
              "TaskDefinitionFamily": "task-definition"
            },
            "eks": {
              "ClusterName": "cluster",
              "NodeGroupName": "nodegroup"
            },
            "s3": {
              "BucketName": "",
              "StorageType": "storage"
            },
            "apigateway": {
              "ApiId": "api",
              "Stage": "stage",
              "ResourceId": "resource"
            },
            "sns": {
              "TopicName": "topic"
            },
            "sqs": {
              "QueueName": "queue"
            },
            "redshift": {
              "ClusterIdentifier": "cluster",
              "NodeID": "node"
            },
            "opensearch": {
              "DomainName": "domain",
              "ClientId": "client",
              "NodeId": "node"
            },
            "msk": {
              "ClusterName": "cluster",
              "BrokerId": "broker"
            },
            "neptune": {
              "DBClusterIdentifier": "cluster",
              "DBInstanceIdentifier": "instance"
            },
            "documentdb": {
              "DBClusterIdentifier": "cluster",
              "DBInstanceIdentifier": "instance"
            },
            "elasticloadbalancing": {
              "LoadBalancer": "loadbalancer",
              "TargetGroup": "targetgroup"
            },
            "kinesis": {
              "StreamName": "stream",
              "ShardId": "shard"
            },
            "efs": {
              "FileSystemId": "file-system"
            },
            "fsx": {
              "FileSystemId": "file-system"
            },
            "cloudfront": {
              "DistributionId": "distribution"
            },
            "route53": {
              "HostedZoneId": "hosted-zone",
              "HealthCheckId": "health-check"
            },
            "sagemaker": {
              "EndpointName": "endpoint",
              "InstanceType": "instance"
            },
            "waf": {
              "WebACL": "web-acl",
              "Rule": "rule"
            },
            "stepfunctions": {
              "StateMachineArn": "state-machine",
              "ExecutionArn": "execution"
            },
            "eventbridge": {
              "RuleName": "rule",
              "EventBusName": "event-bus"
            },
            "vpc": {
              "VpcId": "vpc",
              "SubnetId": "subnet",
              "NetworkInterfaceId": "network-interface"
            },
            "transitgateway": {
              "TransitGatewayId": "transit-gateway"
            },
            "vpn": {
              "VpnId": "vpn-connection"
            },
            "natgateway": {
              "NatGatewayId": "nat-gateway"
            },
            "acm": {
              "CertificateArn": "certificate"
            },
            "kms": {
              "KeyId": "key"
            },
            "ecr": {
              "RepositoryName": "repository"
            },
            "backup": {
              "BackupVaultName": "vault",
              "BackupJobId": "job"
            },
            "elasticbeanstalk": {
              "EnvironmentName": "environment",
              "ApplicationName": "application"
            },
            "emr": {
              "JobFlowId": "cluster",
              "InstanceGroupId": "instance-group"
            },
            "memorydb": {
              "ClusterName": "cluster",
              "NodeName": "node"
            }
          }


          # current region
          region = os.environ['AWS_REGION']
          # current account id
          account_id = boto3.client('sts').get_caller_identity().get('Account')

          detail_type = ''
          # alarm_tags = []

          def get_resource_tags(resource_arn):
            """Get tags for a given AWS resource ARN"""
            try:
              resourcegroupstaggingapi = boto3.client('resourcegroupstaggingapi')
              print(f"Resource ARN: {resource_arn}")
              response = resourcegroupstaggingapi.get_resources(
                ResourceARNList=[resource_arn]
              )

              if response['ResourceTagMappingList']:
                return response['ResourceTagMappingList'][0]['Tags']
              return []
            except Exception as e:
              print(f"!!!!! Error getting tags for {resource_arn}: {str(e)}")
              try:
                resourcegroupstaggingapi = boto3.client('resourcegroupstaggingapi')
                print(f"Resource ARN: {resource_arn.replace('/', ':')}")
                response = resourcegroupstaggingapi.get_resources(
                  ResourceARNList=[resource_arn.replace("/",":")]
                )
                if response['ResourceTagMappingList']:
                  return response['ResourceTagMappingList'][0]['Tags']
                return []
              except Exception as e:
                print(f"!!!!! Error getting tags for {resource_arn}: {str(e)}")

          # generate a resource arn from the resource id for all aws resource types
          def generate_arn(partition, resource_type, sub_type, resource_id):
            """Generate an ARN for a given AWS resource type and ID"""

            sub_resource_type=service_cloudwatch_dimension_map.get(resource_type.lower())
            resource_name=sub_resource_type.get(sub_type)

            return f"arn:{partition}:{resource_type}:{region}:{account_id}:{resource_name}/{resource_id}"


          def enrich_event_with_tags(event):
            """Enrich the alarm event with resource tags"""

            # Get the monitored resource information from alarm configuration
            alarm_details = event.get('detail', {})
            configuration = alarm_details.get('configuration', {})
            metrics = configuration.get('metrics', [])
            event_type = event.get('detail-type')

            alarm_tags = []

            detail_type = event.get('detail-type')
            monitored_resources = []
            print(f"Event type: {event_type}")
            print()

            # Extract resource information from the event
            if event_type == "Backup Job State Change" or event_type == "Backup Copy Job State Change":
              monitored_resources.append(event['detail']['resourceArn'])
            elif event_type == "EC2 Instance State-change Notification":
              monitored_resources.append(event['resources'][0])
            elif event_type == "CloudWatch Alarm State Change":
              # Get the alarm ARN from the event
              alarm_arn = event.get('resources', [None])[0]
              if not alarm_arn:
                return event

              # Get tags for the alarm
              alarm_tags = get_resource_tags(alarm_arn)

              # Extract resource information from metrics
              for metric in metrics:
                if 'metricStat' in metric:
                  metric_info = metric['metricStat']['metric']
                  resource_type = metric['metricStat']['metric']['namespace'].split('/')[1].lower()
                  partition = metric['metricStat']['metric']['namespace'].split('/')[0].lower()
                  if 'dimensions' in metric_info:
                    dimensions = metric_info['dimensions']
                    # Common resource identifiers in dimensions

                    for key, value in dimensions.items():
                      monitored_resources.append(generate_arn(partition,resource_type, key, value))

            # Get tags for the monitored resource
            for resource in list(set(monitored_resources)):
              resource_tags = get_resource_tags(resource)
              alarm_tags.extend(resource_tags)


            # Enrich the event with tags
            enriched_event = event.copy()
            enriched_event['enriched'] = {
              'resource_tags': alarm_tags,
              'monitored_resources': list(set(monitored_resources))
            }

            return enriched_event

          # function to send the enriched event to a central event bridge bus
          def send_to_event_bridge(enriched_event, event_bus_arn):
            """Send the enriched event to a central event bridge bus"""
            try:
              detail_type = enriched_event.get('detail-type')
              enriched_event_source = os.environ['ENRICHED_EVENT_SOURCE']
              event_bridge = boto3.client('events', region_name=event_bus_arn.split(":")[3])
              ser=event_bridge.put_events(
                Entries=[
                  {
                    'Source': enriched_event_source,
                    'DetailType': detail_type,
                    'Detail': json.dumps(enriched_event),
                    'EventBusName': event_bus_arn
                  }
                ]
              )
              print("send event result", json.dumps(ser))
              print(f"Sent enriched event to {event_bus_arn}")
            except Exception as e:
              print(f"Error sending event to EventBridge: {str(e)}")
              raise e

          def lambda_handler(event, context):
            """Main Lambda handler"""
            try:
              # If the input is a string, parse it as JSON
              if isinstance(event, str):
                event = json.loads(event)
              print(f"Received event: {event}")
              print()
              detail_type = event.get('detail-type')

              # Enrich the event with tags
              enriched_event = enrich_event_with_tags(event)
              event_bus_arn = os.environ['CENTRAL_EVENTBUS_ARN']
              print(f"Enriched event: {json.dumps(enriched_event)}")
              print(send_to_event_bridge(enriched_event, event_bus_arn))

              # You can add your custom logic here
              # For example, sending to a monitoring system or notification service

              return {
                'statusCode': 200,
                'body': json.dumps(enriched_event)
              }

            except Exception as e:
              print(f"Error processing event: {str(e)}")
              return {
                'statusCode': 500,
                'body': json.dumps({'error': str(e)})
              }

      Description: Lambda function to enrich event with resource tags
      FunctionName: !Ref pLambdaFunctionName
      Handler: index.lambda_handler
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/${pLambdaFunctionRoleName}
      Environment:
        Variables:
          CENTRAL_EVENTBUS_ARN: !Sub arn:aws:events:${pCentralEventBusRegion}:${pCentralAccountId}:event-bus/${pCentralEventBusName}
          ENRICHED_EVENT_SOURCE: !Ref pEnrichedEventSource
      LoggingConfig:
        LogFormat: 'JSON'
        LogGroup: !Ref rLogGroupLambda
      Runtime: python3.13
      KmsKeyArn: !GetAtt rCloudWatchKMSKey.Arn
      ReservedConcurrentExecutions: !Ref pLambdaReservedConcurrentExecutions
      MemorySize: !Ref pLambdaMemorySize
      Timeout:  !Ref pLambdaTimeout


  rAlarmStateChangeRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Ref pAlarmStateChangeRuleName
      Description: Rule to capture CloudWatch Alarm state changes
      EventPattern: !Ref pEventRulePattern
      State: ENABLED
      Targets:
        - Arn: !GetAtt rEventTagsEnricherLambda.Arn
          Id: SendToEnricherLambda
          RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/${pLambdaFunctionRoleName}
        # send a copy of the event to local cloud watch loggroup
        - Arn: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/events/${pLogGroupName}
          Id: SendToLogGroup
